#!/bin/bash
[% c("var/set_default_env") -%]
[% pc(c('var/compiler'), 'var/setup', { compiler_tarfile => c('input_files_by_name/' _ c('var/compiler')) }) %]

tar -xf $rootdir/[% c('input_files_by_name/firefox-android') %]

assets_dir=assets
ext_dir=$assets_dir/extensions
qa_apk=[% dest_dir %]/[% c('filename') %]/[% c("var/project-name") %]-qa-[% c("var/osname") %]-[% c("version") %].apk
apk=$rootdir/firefox-android/*-[% c("var/abi") %]-*.apk

# tor-browser-build#40920
sorted_baseline_apk=$(basename $apk .apk)_sorted_baseline.apk
$rootdir/sort-baseline.py --apk $apk $sorted_baseline_apk
mv $sorted_baseline_apk $apk

# Bundle our extension(s).
# NoScript will be copied over to the profile folder
# as a "regular" browser extension receiving regular AMO updates.
noscript_path="$ext_dir/{73a6fe31-595d-460b-a920-fcc0f8843232}.xpi"

mkdir -p /var/tmp/build/$ext_dir [% dest_dir _ '/' _ c('filename') %]
cd /var/tmp/build
mv $rootdir/[% c('input_files_by_name/noscript') %] "$noscript_path"

[%IF c("var/tor-browser") -%]
  tar -xaf "$rootdir/[% c("input_files_by_name/tor-expert-bundle") %]/tor-expert-bundle.tar.gz" tor/pluggable_transports/pt_config.json
[% END -%]
unzip -j "$apk" assets/omni.ja
mkdir omni
pushd omni
unzip ../omni.ja
[%IF c("var/tor-browser") -%]
  cp -a ../tor/pluggable_transports/pt_config.json chrome/toolkit/content/global/pt_config.json
[% END -%]
[% c('zip', {
        zip_src   => [ '.' ],
        zip_args  => '-0 ../assets/omni.ja',
      }) %]
popd


[% IF c("var/verify_allowed_addons") %]
  # Check that allowed_addons.json contains the right versions of our bundled extension(s).
  # If so, replace the default allowed_addons.json by ours in the apk assets folder.
  $rootdir/verify_allowed_addons.py "$rootdir/allowed_addons.json" "$noscript_path"
[% END %]

mv $rootdir/allowed_addons.json $assets_dir/allowed_addons.json

mkdir apk
pushd apk
7zz x "$apk"
cp -R ../assets ./
find -type f -exec touch -m -t '[% USE date; date.format(pc("firefox-android", "timestamp"), format = "%Y%m%d%H%M") %]' {} \;
find -type f ! -name resources.arsc -printf '%P\n' | sort > ../files.txt
7zz a -tzip -mx9 -mtc- -spf ../repacked.apk @../files.txt
# resources.arsc must not be compressed as per the APK specifications
7zz a -tzip -mm=Copy -mtc- ../repacked.apk resources.arsc
popd

aligned_apk=$(basename $apk .apk)_aligned.apk
zipalign -vp 4 repacked.apk $aligned_apk

# Sign a QA build. This .apk is not a debug version and doesn't contain a debug
# flag in the manifest.
apksigner sign --verbose --min-sdk-version [% c("var/android_min_api") %] --ks $rootdir/android-qa.keystore --out $qa_apk --in $aligned_apk --ks-key-alias androidqakey --key-pass pass:android --ks-pass pass:android

unsign_patch="[% dest_dir %]/[% c('filename') %]/[% c('var/project-name') %]-qa-unsign-[% c('var/osname') %]-[% c('version') %].bspatch"
bsdiff $qa_apk $aligned_apk $unsign_patch

[%IF c("var/tor-browser") -%]
  tor_expert_bundle_src="[% c('input_files_by_name/tor-expert-bundle') %]"
  # strip off trailing "$buildid.tar.gz"
  tor_expert_bundle_dest=${tor_expert_bundle_src:0:-7}.tar.gz
  cp "$rootdir/[% c("input_files_by_name/tor-expert-bundle") %]/tor-expert-bundle.tar.gz" [% dest_dir %]/[% c('filename') %]/$tor_expert_bundle_dest
[% END -%]
