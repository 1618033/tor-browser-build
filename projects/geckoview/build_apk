#!/bin/bash
[% INCLUDE 'build_common' %]

tar -C $distdir -xf $rootdir/[% c('input_files_by_name/translation-fenix') %]

tar -xf [% c('input_files_by_name/glean-wheels') %]
export GLEAN_PYTHON_WHEELS_DIR=$rootdir/glean-wheels

tar -C $builddir -xf [% c('input_files_by_name/geckoview_armv7') %]
tar -C $builddir -xf [% c('input_files_by_name/geckoview_aarch64') %]
tar -C $builddir -xf [% c('input_files_by_name/geckoview_x86') %]
tar -C $builddir -xf [% c('input_files_by_name/geckoview_x86_64') %]
tar -C $builddir -xf [% project %]-[% c('version') %].tar.[% c('compress_tar') %]

# Specify the architectures we want to merge
export MOZ_ANDROID_FAT_AAR_ARCHITECTURES=armeabi-v7a,arm64-v8a,x86,x86_64
export MOZ_ANDROID_FAT_AAR_ARMEABI_V7A=$builddir/geckoview/*armeabi-v7a*.aar
export MOZ_ANDROID_FAT_AAR_ARM64_V8A=$builddir/geckoview/*arm64-v8a*.aar
# Specifying just "x86" is not differentiating enough
export MOZ_ANDROID_FAT_AAR_X86=$builddir/geckoview/*x86-*.aar
export MOZ_ANDROID_FAT_AAR_X86_64=$builddir/geckoview/*x86_64*.aar

cd $builddir/[% project %]-[% c("version") %]
ln -s mozconfig-android-all .mozconfig
cat >> mozconfig-android-all << 'MOZCONFIG_EOF'
mk_add_options MOZ_PARALLEL_BUILD=[% c("num_procs") %]
export MOZ_INCLUDE_SOURCE_INFO=1
export MOZ_SOURCE_REPO="[% c('var/gitlab_project') %]"
export MOZ_SOURCE_CHANGESET=[% c("var/git_commit") %]
MOZCONFIG_EOF

[% IF c("var/has_l10n") -%]
  supported_locales="[% tmpl(c('var/locales_mobile').join(' ')).replace('-r', '-').replace('in', 'id').replace('iw', 'he') %]"
  l10ncentral="$HOME/.mozbuild/l10n-central"
  mkdir "$l10ncentral"
  for tarball in $rootdir/[% c('input_files_by_name/firefox-l10n') %]/*; do
    tar -C "$l10ncentral" -xf "$tarball"
  done

  # Do not setup our localization files, as we do not provide any frontend
  # through GeckoView.
[% END -%]

# We still need to specify --tor-browser-version due to bug 34005.
./mach configure \
  --with-base-browser-version=[% c("var/torbrowser_version") %] \
  --enable-update-channel=[% c("var/variant") %] \
  [% IF !c("var/rlbox") -%]--without-wasm-sandboxed-libraries[% END %]

./mach build --verbose

[% IF c('var/has_l10n') -%]
  # No quotes on purpose, to pass each locale as an additional argument.
  ./mach package-multi-locale --locales en-US $supported_locales
[% END -%]

pushd mobile/android/android-components
gradle $GRADLE_FLAGS assembleGecko -x lint
popd

# The build might fail with "file exists" otherwise.
rm -rf /var/tmp/dist/android-toolchain/gradle/glean/pythonenv

pushd mobile/android/fenix

cp -a $rootdir/[% c('input_files_by_name/tor-expert-bundle-aar') %]/tor-expert-bundle.aar app/

# Use the Android Components we have just built
echo autoPublish.android-components.dir=../android-components > local.properties

# Add our localized strings
supported_locales="[% tmpl(c('var/locales_mobile').join(' ')) %]"
for lang in $supported_locales; do
  cp "/var/tmp/dist/translation-fenix/$lang/torbrowser_strings.xml" "app/src/main/res/values-$lang/"
done

# Bug 40485: Inject deterministic build date into Glean.
echo 'ext.gleanBuildDate = "0"' >> app/build.gradle

variant='[% c("var/variant") %]'
# We put the tor-browser version last to avoid int-parsing errors when consumers of project.versionName
# assume it starts with a major version number, as it does for all Mozilla version names.
version_name="[% c('var/fenix_version') %]-$variant ([% c('var/torbrowser_version') %])"

gradle $GRADLE_FLAGS -PversionName="$version_name" "assemble$variant"

mkdir $distdir/[% project %]
cp app/build/outputs/apk/fenix/$variant/*.apk $distdir/[% project %]

popd

cd $distdir/
[% c('tar', {
    tar_src => [ project ],
    tar_args => '-caf ' _ dest_dir _ '/' _ c('filename'),
  }) %]
