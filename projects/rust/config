# vim: filetype=yaml sw=2
filename: '[% project %]-[% c("version") %]-[% c("var/filename_targets") %]-[% c("var/build_id") %].tar.[% c("compress_tar") %]'
version: '1.69.0'
container:
  use_container: 1

var:
  filename_targets: "[% c('var/osname') %]"
  llvm_root: "/var/tmp/dist/clang"

targets:
  android:
    var:
      target: armv7-linux-androideabi,thumbv7neon-linux-androideabi,aarch64-linux-android,i686-linux-android,x86_64-linux-android
      target_flags: --set=target.armv7-linux-androideabi.cc=armv7a-linux-androideabi16-clang --set=target.armv7-linux-androideabi.ar=llvm-ar --set=target.thumbv7neon-linux-androideabi.cc=armv7a-linux-androideabi16-clang --set=target.thumbv7neon-linux-androideabi.ar=llvm-ar --set=target.aarch64-linux-android.cc=aarch64-linux-android21-clang --set=target.aarch64-linux-android.ar=llvm-ar --set=target.i686-linux-android.cc=i686-linux-android16-clang --set=target.i686-linux-android.ar=llvm-ar --set=target.x86_64-linux-android.cc=x86_64-linux-android21-clang --set=target.x86_64-linux-android.ar=llvm-ar
      filename_targets: android

  linux:
    var:
      target: i686-unknown-linux-gnu
      target_flags: --set target.i686-unknown-linux-gnu.linker=clang --set target.i686-unknown-linux-gnu.ar=llvm-ar --set target.i686-unknown-linux-gnu.ranlib=llvm-ranlib
      filename_targets: linux

  macos:
    var:
      target: '[% c("var/build_target") %]'
      target_flags: --set=target.[% c("var/build_target") %].cc=[% c("var/build_target") %]-clang
      llvm_root: "/var/tmp/dist/macosx-toolchain/clang"
      arch_deps:
        - pkg-config

  windows:
    var:
      # See tor-browser-build#29320
      compiler: mingw-w64
      target: '[% c("arch") %]-pc-windows-gnu'
      target_flags:
      arch_deps:
        - pkg-config

input_files:
  - project: container-image
  - name: binutils
    project: binutils
  - project: cmake
    name: cmake
  - project: '[% c("var/compiler") %]'
    name: '[% c("var/compiler") %]'
  - project: clang
    name: clang
    # On Windows we the basic Clang without additional Windows stuff because we
    # want to be sure GCC is used to compile Rust (Rust has a hard depedency on
    # libgcc, and the GNU/LLVM is a tier 3 platform supported only for x86_64).
    # macOS does not need Clang because it comes already with its compiler.
    enable: '[% c("var/linux") || c("var/android") || c("var/windows") %]'
  - project: ninja
    name: ninja
  - URL: 'https://static.rust-lang.org/dist/rustc-[% c("version") %]-src.tar.gz'
    name: rust
    sig_ext: asc
    file_gpg_id: 1
    gpg_keyring: rust.gpg
  - URL: 'https://static.rust-lang.org/dist/rust-[% c("version") %]-x86_64-unknown-linux-gnu.tar.xz'
    name: rust_prebuilt
    sig_ext: asc
    file_gpg_id: 1
    gpg_keyring: rust.gpg
  - project: python
    name: python
    enable: '[% c("var/linux") %]'
  # Needed only for 1.69.0.
  # See https://github.com/rust-lang/rust/issues/108948.
  - filename: external-llvm.patch
